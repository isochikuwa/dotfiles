[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \ 'colorscheme' : 'wombat',
  \ 'active': {
  \   'left': [ [ 'mode', 'paste' ],
  \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component_function': {
  \   'gitbranch': 'fugitive#head'
  \ }
\ }
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_guide_size = 1
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
let g:quickrun_config = {
    \ '_' : {
        \ 'runner' : 'vimproc',
        \ 'runner/vimproc/updatetime' : 40,
        \ 'outputter' : 'error',
        \ 'outputter/error/success' : 'buffer',
        \ 'outputter/error/error' : 'quickfix',
        \ 'outputter/buffer/opener' : 'botright 8new'
        \ }
    \}
nmap <silent> <Leader>r <Plug>(quickrun)
'''

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'kannokanno/previm'
# hook_add = "let g:previm_open_cmd = 'open -a google-chrome'"

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
  let lexima_ctrlh_as_backspace = 1
'''

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'mileszs/ack.vim'
hook_add = '''
    let g:ackprg = 'ag --vimgrep'
'''

[[plugins]]
repo = "airblade/vim-gitgutter"

[[plugins]]
repo = "tpope/vim-fugitive"

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-rails'

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
hook_add = '''
  nnoremap [coc] <Nop>
  nmap <space>o [coc]
  nmap <silent> [coc]f <Plug>(coc-format)
  nmap <silent> [coc]<space> :<C-u>CocList<cr>
  nmap <silent> [coc]rn <Plug>(coc-rename)
  nmap <silent> [coc]h :<C-u>call CocAction('doHover')<cr>
  nmap <silent> [coc]d <Plug>(coc-definition)
  nmap <silent> [coc]rf <Plug>(coc-references)
  let g:coc_global_extensions = [
    \ 'coc-rust-analyzer',
    \ 'coc-clangd',
    \ 'coc-go',
    \ 'coc-json',
    \ 'coc-solargraph',
    \ 'coc-tsserver',
    \ 'coc-vetur',
    \ 'coc-yaml',
    \ 'coc-html',
    \ 'coc-css',
    \ 'coc-vimlsp',
    \ 'coc-pyright'
  \ ]
'''

[[plugins]]
repo = 'posva/vim-vue'
hook_add = '''
  let g:vim_vue_plugin_load_full_syntax = 1
'''

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'

[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
hook_add = '''
  nnoremap [fzf] <Nop>
  nmap <space>f [fzf]
  nmap <silent> [fzf]b :<C-u>Buffers<cr>
  nmap <silent> [fzf]h :<C-u>History<cr>
  nmap <silent> [fzf]g :<C-u>GFiles<cr>
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'

[[plugins]]
repo = 'prettier/vim-prettier'
on_ft = ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html', 'vue']

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'sh -c "cd app & yarn install"'

[[plugins]]
repo = 'aklt/plantuml-syntax'

[[plugins]]
repo = 'weirongxu/plantuml-previewer.vim'

[[plugins]]
repo = 'tpope/vim-obsession'

[[plugins]]
repo = 'sharat87/roast.vim'

[[plugins]]
repo = 'majutsushi/tagbar'
hook_add = '''
  nmap <silent> <Leader>t :<C-u>TagbarToggle<cr>
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
nmap <silent> <Leader>n :<C-u>Defx<cr>
autocmd FileType defx call s:defx_my_settings()

function! s:defx_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
   \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> l
  \ defx#do_action('drop')
  nnoremap <silent><buffer><expr> t
  \ defx#do_action('open','tabnew')
  nnoremap <silent><buffer><expr> v
  \ defx#do_action('drop', 'vsplit')
  nnoremap <silent><buffer><expr> o
  \ defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> ma
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> md
  \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> mm
  \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> !
  \ defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> mo
  \ defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> yy
  \ defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ;
  \ defx#do_action('repeat')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> j
  \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
  \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
  nnoremap <silent><buffer><expr> cd
  \ defx#do_action('change_vim_cwd')
endfunction
call defx#custom#option('_', {
      \ 'winwidth': 40,
      \ 'split': 'vertical',
      \ 'direction': 'topleft',
      \ 'show_ignored_files': 1,
      \ 'buffer_name': 'exlorer',
      \ 'toggle': 1,
      \ 'resume': 1,
      \ 'columns': 'mark:indent:git:icon:filename:type:size:time',
      \ })
autocmd BufWritePost * call defx#redraw()
autocmd BufEnter * call defx#redraw()
'''

[[plugins]]
repo = 'kristijanhusak/defx-git'

[[plugins]]
repo = 'shuntaka9576/preview-swagger.nvim'
build = 'yarn install'

[[plugins]]
repo = 'jpalardy/vim-slime'
hook_add = '''
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": "2"}
let g:slime_dont_ask_default = 1
'''
